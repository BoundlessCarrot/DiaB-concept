name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.13.0
      - run: zig fmt --check .

  build:
    permissions: write-all
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-linux
          - os: macos-latest
            target: aarch64-macos-none
          - os: windows-latest
            target: x86_64-windows
    runs-on: ${{ matrix.os }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    steps:
      - uses: actions/checkout@v2
      
      - name: Get commit hash
        id: commit
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - uses: goto-bus-stop/setup-zig@v2
        name: Setup zig
        with:
          version: 0.13.0
        
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libgl1-mesa-dev libx11-dev libgtk-4-dev build-essential

      - name: Set SDKROOT (macOS)
        if: matrix.os == 'macos-latest'
        run: echo "export SDKROOT=$(xcrun --show-sdk-path)" >> $GITHUB_ENV

      - name: Get universal dependencies
        run: zig fetch --save https://github.com/Not-Nik/raylib-zig/archive/devel.tar.gz
          
      - name: Build binary
        run: zig build -Doptimize=ReleaseSafe

      - name: Prepare binary (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          chmod +x zig-out/bin/DiaB-concept
          mv zig-out/bin/DiaB-concept zig-out/bin/DiaB-concept_${{ matrix.os }}-${{ matrix.target }}

      - name: Create macOS App Bundle
        if: matrix.os == 'macos-latest'
        run: |
          APP_NAME="DiaB-concept"
          BUNDLE_NAME="${APP_NAME}.app"
          CONTENTS_DIR="${BUNDLE_NAME}/Contents"
          MACOS_DIR="${CONTENTS_DIR}/MacOS"
          RESOURCES_DIR="${CONTENTS_DIR}/Resources"
          
          mkdir -p "${MACOS_DIR}" "${RESOURCES_DIR}"
          
          # Move the binary to the MacOS directory
          mv zig-out/bin/DiaB-concept "${MACOS_DIR}/${APP_NAME}"
          
          # Create the Info.plist file
          cat > "${CONTENTS_DIR}/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>${APP_NAME}</string>
              <key>CFBundleIconFile</key>
              <string>icon.icns</string>
              <key>CFBundleIdentifier</key>
              <string>com.yourdomain.${APP_NAME}</string>
              <key>CFBundleInfoDictionaryVersion</key>
              <string>6.0</string>
              <key>CFBundleName</key>
              <string>${APP_NAME}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
              <key>CFBundleVersion</key>
              <string>1</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.15</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # If you have an icon file, you would copy it here:
          # cp path/to/your/icon.icns "${RESOURCES_DIR}/icon.icns"
          
          # Rename the folder to .app bundle
          mv "${BUNDLE_NAME}" "DiaB-concept_${{ matrix.os }}-${{ matrix.target }}.app"

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $binary = Get-ChildItem -Path zig-out\bin -Filter *.exe | Select-Object -First 1
          if ($binary) {
            $newName = "DiaB-concept_${{ matrix.os }}-${{ matrix.target }}.exe"
            Rename-Item -Path $binary.FullName -NewName $newName
            Write-Output "Renamed $($binary.Name) to $newName"
          } else {
            Write-Error "No .exe file found in zig-out\bin"
            exit 1
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: DiaB-concept_${{ matrix.os }}-${{ matrix.target }}
          path: |
            zig-out/bin/DiaB-concept_${{ matrix.os }}-${{ matrix.target }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
            ${{ matrix.os == 'macos-latest' && 'DiaB-concept_*.app' || '' }}
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Determine release type
        id: release_type
        run: |
          # Check for #major, #minor, #patch in the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG == *#major* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MSG == *#minor* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MSG == *#patch* ]]; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            # Default to patch if not specified
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Get version
        id: get_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.5")
          echo "Latest tag: $LATEST_TAG"
          
          # Remove 'v' prefix and split into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
          
          RELEASE_TYPE="${{ steps.release_type.outputs.type }}"
          echo "Release type: $RELEASE_TYPE"
          
          if [[ $RELEASE_TYPE == "major" ]]; then
            NEW_VERSION="$((MAJOR+1)).0.0"
          elif [[ $RELEASE_TYPE == "minor" ]]; then
            NEW_VERSION="$MAJOR.$((MINOR+1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH+1))"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create tag
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.new_version }}
        run: |
          echo "Creating tag v$NEW_VERSION"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a v$NEW_VERSION -m "Release v$NEW_VERSION"
          git push origin v$NEW_VERSION

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.get_version.outputs.new_version }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          files: |
            **/DiaB-concept_*
            **/DiaB-concept_*.app/**/*
          generate_release_notes: true

      - name: Debug
        if: failure()
        run: |
          echo "GITHUB_TOKEN permissions:"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/permissions
          echo "Current user:"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/user
          echo "Environment variables:"
          env
          echo "GitHub context:"
          echo '${{ toJson(github) }}'
